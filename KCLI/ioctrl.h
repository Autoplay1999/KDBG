#ifndef _IOCTRL_H
#define _IOCTRL_H

#include "global.h"

#define KDRV_CTRL_DUMP_MODULES CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0100, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)
#define KDRV_CTRL_DUMP_THREADS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0101, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)
#define KDRV_CTRL_DUMP_REGISTERS CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0102, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)

#define KDRV_CTRL_MEMORY_READ CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0200, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)
#define KDRV_CTRL_MEMORY_WRITE CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0201, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)

#define KDRV_CTRL_THREAD_SUSPEND CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0300, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)
#define KDRV_CTRL_THREAD_RESUME CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0301, METHOD_OUT_DIRECT, FILE_SPECIAL_ACCESS)

typedef struct _KDRV_REQ_DUMP_MODULES
{
  enum
  {
    Kernel,
    User,
  } Mode;
  ULONG Pid;
  ULONG Size;
  typedef struct
  {
    PVOID Base;
    union
    {
      CHAR Name[256];
      WCHAR WName[256];
    };
    ULONG Size;
  } MODULE, * PMODULE;
  PMODULE Modules;
} KDRV_REQ_DUMP_MODULES, * PKDRV_REQ_DUMP_MODULES;
typedef struct _KDRV_REQ_DUMP_THREADS
{
  ULONG Size;
  typedef struct
  {
    ULONG Pid;
    ULONG Tid;
    PVOID Start;
    ULONG State;
  } THREAD, * PTHREAD;
  PTHREAD Threads;
} KDRV_REQ_DUMP_THREADS, * PKDRV_REQ_DUMP_THREADS;
typedef struct _KDRV_REQ_DUMP_REGISTERS
{
  ULONG Tid;
  CONTEXT Registers;
} KDRV_REQ_DUMP_REGISTERS, * PKDRV_REQ_DUMP_REGISTERS;

typedef struct _KDRV_REQ_MEMORY_READ
{
  ULONG Pid;
  PWCHAR ModuleName;
  PBYTE Buffer;
  ULONG Offset;
  ULONG Size;
} KDRV_REQ_MEMORY_READ, * PKDRV_REQ_MEMORY_READ;
typedef struct _KDRV_REQ_MEMORY_WRITE
{
  ULONG Pid;
  PWCHAR ModuleName;
  PBYTE Buffer;
  ULONG Offset;
  ULONG Size;
} KDRV_REQ_MEMORY_WRITE, * PKDRV_REQ_MEMORY_WRITE;

typedef struct _KDRV_REQ_THREAD_SUSPEND
{
  ULONG Pid;
  ULONG Tid;
} KDRV_REQ_THREAD_SUSPEND, * PKDRV_REQ_THREAD_SUSPEND;
typedef struct _KDRV_REQ_THREAD_RESUME
{
  ULONG Pid;
  ULONG Tid;
} KDRV_REQ_THREAD_RESUME, * PKDRV_REQ_THREAD_RESUME;

#endif